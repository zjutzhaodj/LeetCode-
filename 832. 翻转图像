给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。

水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。

反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。

示例 1:

输入: [[1,1,0],[1,0,1],[0,0,0]]
输出: [[1,0,0],[0,1,0],[1,1,1]]
解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
示例 2:

输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
说明:

1 <= A.length = A[0].length <= 20
0 <= A[i][j] <= 1

------------------------------------------------------------------------------------

   public int[][] flipAndInvertImage(int[][] A) {
        int n = A[0].length;
        for(int[] res : A){
            for(int i =0;i<(n+1)/2;i++){
                int temp = res[i];
                res[i] = res[n-1-i]^1;
                res[n-1-i] = temp^1;
            }
        }
        return A;
    }

-------解析：

int[] A;
A左边第i位等于A右边第i位的取反，就是跟1的异或
同理A右边第i位等于A左边第i位的取反
假定数组A的length为n，左边第i位表示为a[i] 右边第i位表示为 a[n-1-i]  前提为a<(n+1)/2
当n为奇数时，比如 n为3 中间的那位临界值 a[i] = a[1]  a[n-1-i] = a[1]  所以不需要对中间值进行特殊的处理



